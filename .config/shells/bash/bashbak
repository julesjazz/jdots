# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# ── Environment & Path Setup ───────────────────────────────────────────────────
# Set bash config directory
export BASH_CONFIG_DIR="$HOME/.config/shells/bash"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
# TODO: Add source.env to the project
# source_env="${XDG_CONFIG_HOME:-$HOME/.config}/shells/source.env"
# [ -f "$source_env" ] && source "$source_env"

# Common environment variables
export EDITOR="nvim"
export VISUAL="nvim"
export PAGER="less"

# -- TLDR Config
export TEALDEER_CONFIG_DIR="$XDG_CONFIG_HOME/shells/tldr"
alias tldr='tldr'

# Homebrew PATH setup
eval "$(/opt/homebrew/bin/brew shellenv)"

# ASDF version manager setup
. "$HOME/.asdf/asdf.sh"
# Add ASDF completions
if [ -f "$HOME/.asdf/completions/asdf.bash" ]; then
    . "$HOME/.asdf/completions/asdf.bash"
fi

# ── History Configuration ───────────────────────────────────────────────────────
HISTFILE="$XDG_CONFIG_HOME/shells/.history"  # Shared history location
HISTSIZE=10000
HISTFILESIZE=10000

# History control options (bash equivalent of zsh setopt)
# ignoreboth = ignoredups + ignorespace (equivalent to HIST_IGNORE_ALL_DUPS + HIST_IGNORE_SPACE)
# erasedups = remove older duplicate entries (equivalent to HIST_IGNORE_ALL_DUPS)
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it (equivalent to INC_APPEND_HISTORY)
shopt -s histappend

# Additional bash-specific history settings
# histreedit = re-edit a failed history substitution (equivalent to HIST_VERIFY)
shopt -s histreedit
# histverify = don't execute immediately when using history expansion (equivalent to HIST_VERIFY)
shopt -s histverify

# Custom history filtering function (bash equivalent of zshaddhistory)
# This function is called before each command is added to history
history_filter() {
    local cmd="$1"
    
    # Skip failed commands (bash doesn't have direct access to exit status here)
    # Skip empty or whitespace-only lines
    if [[ -z "${cmd//[[:space:]]/}" ]]; then
        return 1
    fi
    
    # Skip commands starting with space (equivalent to HIST_IGNORE_SPACE)
    if [[ "$cmd" =~ ^[[:space:]] ]]; then
        return 1
    fi
    
    return 0
}

# Enhanced history deduplication function
deduplicate_history() {
    # Create a temporary file for deduplicated history
    local temp_hist=$(mktemp)
    local seen_commands=()
    
    # Read history file and deduplicate
    if [[ -f "$HISTFILE" ]]; then
        while IFS= read -r line; do
            # Extract command part (remove timestamp if present)
            local cmd=$(echo "$line" | sed 's/^[0-9]*: [0-9]*:[0-9]*;//' | sed 's/^[[:space:]]*[0-9]*[[:space:]]*//')
            
            # Skip empty lines
            if [[ -z "${cmd//[[:space:]]/}" ]]; then
                continue
            fi
            
            # Check if we've seen this command before
            local found=0
            for seen_cmd in "${seen_commands[@]}"; do
                if [[ "$cmd" == "$seen_cmd" ]]; then
                    found=1
                    break
                fi
            done
            
            # If not seen before, add to our arrays
            if [[ $found -eq 0 ]]; then
                seen_commands+=("$cmd")
                echo "$line" >> "$temp_hist"
            fi
        done < "$HISTFILE"
        
        # Replace original history file with deduplicated version
        mv "$temp_hist" "$HISTFILE"
    fi
}

# Function to clean up history file (can be called manually)
clean_history() {
    echo "Cleaning history file..."
    deduplicate_history
    # Reload history
    history -r
    echo "History cleaned and reloaded."
}

# ── Shell Options ───────────────────────────────────────────────────────────────
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# ── System Integration ──────────────────────────────────────────────────────────
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# ── Prompt Configuration ───────────────────────────────────────────────────────
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# ── Color Support ───────────────────────────────────────────────────────────────
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# ── System Aliases ─────────────────────────────────────────────────────────────
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# User specific aliases and functions
alias rm='rm -i' # rm plugin used by zsh

# ── Completion Setup ───────────────────────────────────────────────────────────
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# ── Path Configuration ──────────────────────────────────────────────────────────
# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# ── Alias Loading ───────────────────────────────────────────────────────────────
# Source shared aliases
if [[ -f "$XDG_CONFIG_HOME/shells/.aliases" ]]; then
    source "$XDG_CONFIG_HOME/shells/.aliases"
fi

# Source bash-specific aliases
if [[ -f "$BASH_CONFIG_DIR/.aliases" ]]; then
    source "$BASH_CONFIG_DIR/.aliases"
fi

# ── Tool Integration ───────────────────────────────────────────────────────────
# FZF Configuration
if command -v fzf >/dev/null 2>&1; then
  # Auto-completion
  [[ $- == *i* ]] && source "$(brew --prefix)/opt/fzf/shell/completion.bash" 2> /dev/null

  # Key bindings
  source "$(brew --prefix)/opt/fzf/shell/key-bindings.bash" 2> /dev/null

  # FZF configuration
  export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
fi

# ASDF Shim Path
export PATH="$HOME/.asdf/shims:$PATH"

# ── Prompt Engine ───────────────────────────────────────────────────────────────
# Starship Configuration
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/shells/starship/starship.toml"
eval "$(starship init bash)"